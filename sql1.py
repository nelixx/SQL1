import logging
from aiogram.types import KeyboardButton
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from parse import *
import os
from database import *

from dotenv import load_dotenv

from utlis import check_query
# from parse2 import contemporary_prose
from database import Database

load_dotenv()


TOKEN = os.getenv('6541815968:AAEfV3dipxQ3sCgQNJsid7fKt7JzQiJBvdU')


logging.basicConfig(level=logging.INFO)


bot = Bot(token=TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())
db = Database()

@dp.message_handler(commands='start')
async def start_process(message: types.Message):
    user = await db.check_user(message.from_id)
    if not user:
        await db.register_user(
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.username,
            message.from_id
        )
        await message.answer('–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!')
        await message.answer('–ü—Ä–∏–≤—ñ—Ç!üåü\n–Ø —Å–ø—Ä–æ–±—É—é –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑ —à—É–∫–∞–Ω–Ω—è–º –¥–µ–≤–∞–π—Å—ñ–≤ –¥–ª—è —ñ–≥–æ—Ä')
    
        topic = '/topic'
        search = '/search'
                                

        await message.answer(f'–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç, \n—Å–∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é {search}.üîç\n–Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à —â–æ —à—É–∫–∞—Ç–∏, –∫–æ–º–∞–Ω–¥–∞ {topic} –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —â–æ—Å—å –∑–Ω–∞–π—Ç–∏.')
    else:
        await message.answer('–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ')


@dp.message_handler(commands='topic')
async def start(message: types.Message, state:FSMContext):
    kb = [

        [types.KeyboardButton("XBOX")],
        [types.KeyboardButton("PC Gaming")],
        [types.KeyboardButton("PlayStation")],

    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
    await message.answer('–Ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–±—ñ –±—ñ–ª—å—à –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?', reply_markup=keyboard)


@dp.message_handler(text="XBOX")
async def start(message: types.Message):
    await message.answer("–û–°—å —â–æ —è –º–æ–∂—É –ø—ñ–¥—Å–∫–∞–∑–∞—Ç–∏ ")
    kb_1 = [

        [KeyboardButton(text=" Microsoft Xbox Series S 512 GB + –¥–æ–ø. –¥–∂–æ–π—Å—Ç–∏–∫ (–ì–∞—Ä–∞–Ω—Ç—ñ—è 18 –º—ñ—Å—è—Ü—ñ–≤) (13999 –≥—Ä–Ω)")],
        [KeyboardButton(text="Xbox One S 1–¢–ë All Digital Edition –ë.–í. + –¥–æ–¥. –¥–∂–æ–π—Å—Ç–∏–∫ (–ì–∞—Ä–∞–Ω—Ç—ñ—è 6 –º—ñ—Å—è—Ü—ñ–≤) (7699 –≥—Ä–Ω)")],
        [KeyboardButton(text="Xbox 360 Slim 250 GB LT +3.0 –ë.–í. (3599 –≥—Ä–Ω)")],
        [KeyboardButton(text="Xbox Original 80 GB Black –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –í–∂–∏–≤–∞–Ω–∞ (2499 –≥—Ä–Ω)")],
        
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_1, resize_keyboard=True, selective=True)
    await message.answer('–¶–µ —ñ –≤—Å–µ —ñ–Ω—à–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñn https://game-shop.com.ua/ua', reply_markup=keyboard)


@dp.message_handler(text="PC Gaming")
async def start(message: types.Message):
    await message.answer("–û–°—å —â–æ —è –º–æ–∂—É –ø—ñ–¥—Å–∫–∞–∑–∞—Ç–∏")
    kb_1 = [

        [KeyboardButton(text="–ù–æ—É—Ç–±—É–∫ Acer Predator Helios 300 Gaming Laptop, 17.3 Full HD IPS 144Hz (42999 –≥—Ä–Ω)")],
        [KeyboardButton(text="–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Razer Cynosa Lite RGB Chroma (RZ03-02741500-R3R1) (1199 –≥—Ä–Ω)")],
        [KeyboardButton(text="Mionix Naos QG 12000 DPI (2220 –≥—Ä–Ω)")],
        [KeyboardButton(text="–ì–∞—Ä–Ω—ñ—Ç—É—Ä–∞ RAZER Kraken Black (RZ04-02830100-R3U1) (1999 –≥—Ä–Ω)")],
        [KeyboardButton(text="–ö—Ä—ñ—Å–ª–æ –¥–ª—è –≥–µ–π–º–µ—Ä—ñ–≤ Hator Sport Essential Black / Red (HTC-906) (999–≥—Ä–Ω)")],
        
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_1, resize_keyboard=True, selective=True)
    await message.answer('–¶–µ —ñ –≤—Å–µ —ñ–Ω—à–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñn https://game-shop.com.ua/ua', reply_markup=keyboard)


@dp.message_handler(text="PlayStation")
async def start(message: types.Message):
    await message.answer("–û–°—å —â–æ —è –º–æ–∂—É –ø—ñ–¥—Å–∫–∞–∑–∞—Ç–∏ )")
    kb_1 = [

        [KeyboardButton(text="Sony PlayStation 5 White Digital Edition –ë.–£. (18999 –≥—Ä–Ω)")],
        [KeyboardButton(text="Sony PlayStation 4 SLIM 500gb (–ì–∞—Ä–∞–Ω—Ç—ñ—è 18 –º—ñ—Å—è—Ü—ñ–≤) (12999 –≥—Ä–Ω)")],
        [KeyboardButton(text="Sony Playstation 3 SUPER SLIM 500 GB –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ë.–í. (–ì–∞—Ä–∞–Ω—Ç—ñ—è 3 –º—ñ—Å—è—Ü—è) (3999 –≥—Ä–Ω)")],
        [KeyboardButton(text="–û–∫—É–ª—è—Ä–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ PlayStation VR2 (23999 –≥—Ä–Ω)")],
        

    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_1, resize_keyboard=True, selective=True)
    await message.answer('–¶–µ —ñ –≤—Å–µ —ñ–Ω—à–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñn https://game-shop.com.ua/ua', reply_markup=keyboard)




@dp.message_handler(commands='search')
async def get_games(message:types.Message):
    await message.answer('–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç!')
    await Search.state_on.set()



@dp.message_handler(state=Search.state_on, content_types='text')
async def get_games(message:types.Message, state: FSMContext):
    if not check_query(message.text):
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø–æ—à—É–∫–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª–∏.')
    else:
        query = message.text.lower().strip()
        games = get_games(query)
        for game in games:
            title = games['title']
            price = games['price']
            availability = games['availability']
            url = games['url']
            banner = games['banner']

            msg = (f'<b>–ù–∞–∑–≤–∞: </b>{title}\n<b>–¶—ñ–Ω–∞: </b>{price}\n\n<b>{availability}</b>\n\n<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è: </b>{url}')

            await bot.send_photo(message.chat.id, banner)
            await message.answer(text=msg, parse_mode='html', disable_web_page_preview=True)
            await state.finish()
            await message.answer(f'–Ø–∫—â–æ –±–∞–∂–∞—î—à –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–º–∞–Ω–¥–æ—é /search –∑–Ω–æ–≤—É!üîç')



    

executor.start_polling(dp)